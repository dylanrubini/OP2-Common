!
! auto-generated by op2.py
!

MODULE ADT_CALC_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! adt_calcvariable declarations


TYPE ( c_ptr )  :: planRet_adt_calc

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

attributes (host) subroutine adt_calc(x1,x2,x3,x4,q,temp_dat, adt)
! adt_calc
  IMPLICIT NONE
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x1
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x2
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x3
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x4
  REAL(kind=8), DIMENSION(4), INTENT(IN) :: q
  REAL(kind=8), DIMENSION(1)  :: temp_dat
  REAL(kind=8) :: adt
  REAL(kind=8) :: dx,dy,ri,u,v,c

  ri = 1.0 / q(1)
  u = ri * q(2)
  v = ri * q(3)
  c = sqrt(gam * gm1 * (ri * q(4) - 0.5 * (u * u + v * v)))
  dx = x2(1) - x1(1)
  dy = x2(2) - x1(2)
  adt = abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x3(1) - x2(1)
  dy = x3(2) - x2(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x4(1) - x3(1)
  dy = x4(2) - x3(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x1(1) - x4(1)
  dy = x1(2) - x4(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  adt = adt / cfl

  temp_dat = temp_dat + 1
END SUBROUTINE



attributes (device) subroutine adt_calc_gpu(x1,x2,x3,x4,q,temp_dat, adt)
! adt_calc_gpu
  IMPLICIT NONE
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x1
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x2
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x3
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x4
  REAL(kind=8), DIMENSION(4), INTENT(IN) :: q
  REAL(kind=8), DIMENSION(1)  :: temp_dat
  REAL(kind=8) :: adt
  REAL(kind=8) :: dx,dy,ri,u,v,c

  ri = 1.0 / q(1)
  u = ri * q(2)
  v = ri * q(3)
  c = sqrt(gam_OP2 * gm1_OP2 * (ri * q(4) - 0.5 * (u * u + v * v)))
  dx = x2(1) - x1(1)
  dy = x2(2) - x1(2)
  adt = abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x3(1) - x2(1)
  dy = x3(2) - x2(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x4(1) - x3(1)
  dy = x4(2) - x3(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  dx = x1(1) - x4(1)
  dy = x1(2) - x4(2)
  adt = adt + abs(u * dy - v * dx) + c * sqrt(dx * dx + dy * dy)
  adt = adt / cfl_OP2

  temp_dat = temp_dat + 1
END SUBROUTINE





! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_adt_calc( &
  & opDat1Deviceadt_calc, &
  & opDat1Map, &
  & opDat5Deviceadt_calc, &
  & opDat6Deviceadt_calc, &
  & opDat7Deviceadt_calc, &
  & start, end, &
  & pcol_reord, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Deviceadt_calc(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Deviceadt_calc(*)
  real(8), DEVICE :: opDat6Deviceadt_calc(*)
  real(8), DEVICE :: opDat7Deviceadt_calc(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  INTEGER(kind=4), VALUE :: start, end
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pcol_reord
  INTEGER(kind=4), VALUE :: setSize

  INTEGER(kind=4) :: i3
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2



  i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x
  IF (i1+start<end) THEN
    i3 = pcol_reord(i1+start)
    map1idx = opDat1Map(1 + i3 + setSize * 0)
    map2idx = opDat1Map(1 + i3 + setSize * 1)
    map3idx = opDat1Map(1 + i3 + setSize * 2)
    map4idx = opDat1Map(1 + i3 + setSize * 3)

! kernel call
    CALL adt_calc_gpu( &
    & opDat1Deviceadt_calc(1 + map1idx * (2):     map1idx * (2) + 2), &
    & opDat1Deviceadt_calc(1 + map2idx * (2):     map2idx * (2) + 2), &
    & opDat1Deviceadt_calc(1 + map3idx * (2):     map3idx * (2) + 2), &
    & opDat1Deviceadt_calc(1 + map4idx * (2):     map4idx * (2) + 2), &
    & opDat5Deviceadt_calc(i3 * (4) +1:i3 * (4) + (4)), &
    & opDat6Deviceadt_calc(i3 * (1) +1), &
    & opDat7Deviceadt_calc(i3 * (1) +1) &
    & )

  END IF


END SUBROUTINE

attributes (host) SUBROUTINE adt_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7

  IF (getHybridGPU().EQ.1) THEN
    CALL adt_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE adt_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7

  TYPE ( op_arg ) , DIMENSION(7) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, POINTER :: opDat1Deviceadt_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: opMap1Deviceadt_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat5Deviceadt_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat6Deviceadt_calc
  real(8), DIMENSION(:), DEVICE, POINTER :: opDat7Deviceadt_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality
  INTEGER(kind=4) :: opDat7Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_adt_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:7) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:7) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:7) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:7) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, POINTER :: pcol_reord
  INTEGER(kind=4), DIMENSION(:), POINTER :: color2_offsets
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10

  INTEGER(kind=4), SAVE :: calledTimes=0
  INTEGER(kind=4) :: istat

  numberOfOpDats = 7

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7

#ifdef COMM_PERF
  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & 0.0_8, 0.00000_4,0.00000_4, 0)
  call op_timers_core(startTime)
#endif

  n_upper = op_mpi_halo_exchanges_grouped(set%setCPtr,numberOfOpDats,opArgArray,2)
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 0
  indirectionDescriptorArray(4) = 0
  indirectionDescriptorArray(5) = -1
  indirectionDescriptorArray(6) = -1
  indirectionDescriptorArray(7) = -1

  numberOfIndirectOpDats = 1

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_adt_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,4)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceadt_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Deviceadt_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceadt_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Deviceadt_calc,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Deviceadt_calc,(/opDat7Cardinality/))

  CALL c_f_pointer(planRet_adt_calc,actualPlan_adt_calc)
  CALL c_f_pointer(actualPlan_adt_calc%color2_offsets,color2_offsets,(/actualPlan_adt_calc%ncolors+1/))
  CALL c_f_pointer(actualPlan_adt_calc%col_reord,pcol_reord,(/set%setPtr%size+set%setPtr%exec_size/))


  DO i2 = 0, actualPlan_adt_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_adt_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_grouped(numberOfOpDats,opArgArray,2)
    END IF

    blocksPerGrid = (color2_offsets(i2+2)-color2_offsets(i2+1)-1)/threadsPerBlock+1
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    IF (blocksPerGrid.gt.0) THEN
      CALL op_cuda_adt_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
      & opDat1Deviceadt_calc, &
      & opMap1Deviceadt_calc, &
      & opDat5Deviceadt_calc, &
      & opDat6Deviceadt_calc, &
      & opDat7Deviceadt_calc, &
      & color2_offsets(i2+1), color2_offsets(i2+2), &
      & pcol_reord,set%setPtr%size+set%setPtr%exec_size)
    END IF
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_grouped(numberOfOpDats,opArgArray,2)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  IF (istat.ne.0) THEN
    print *,cudaGetErrorString(istat)
  END IF
#ifdef COMM_PERF
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_adt_calc%transfer,actualPlan_adt_calc%transfer2, 1)
  calledTimes = calledTimes + 1
#endif
END SUBROUTINE

END MODULE
